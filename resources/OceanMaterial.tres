[gd_resource type="ShaderMaterial" load_steps=6 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

render_mode specular_toon;

uniform float height_scale = 0.5;
uniform vec4 color: hint_color = vec4(0.1, 0.3, 0.5, 1.0);
uniform sampler2D noise;
uniform sampler2D normalmap;

varying vec2 vertex_position;

float wave(vec2 position){
  position += texture(noise, position / 10.0).x * 2.0 - 1.0;
  vec2 wv = 1.0 - abs(sin(position));
  return pow(1.0 - pow(wv.x * wv.y, 0.65), 4.0);
}


float height(vec2 position, float time) {
  float d = wave((position + time) * 0.4) * 0.3;
  d += wave((position - time) * 0.3) * 0.3;
  d += wave((position + time) * 0.5) * 0.2;
  d += wave((position - time) * 0.6) * 0.2;
  return d;
}


void vertex() {
	float time = TIME;
	vec2 pos = VERTEX.xz;
	float k = height(pos, time);
	//VERTEX += NORMAL * texture(noise, pos+sin(time)).xyz * 2.0;
	VERTEX.y += k * height_scale;
	/*NORMAL = normalize(vec3(k - height(pos + vec2(0.1, 0.0), time),
							0.1,
							k - height(pos + vec2(0.0, 0.1), time)));*/
	UV2 = VERTEX.xz;
}


void fragment() {
	float fresnel = sqrt(1.0 - dot(NORMAL, VIEW)) * 0.5;
	RIM = 0.1;
	METALLIC = 0.0;
	ROUGHNESS = 0.01 * (1.0 - fresnel);
	//NORMALMAP = texture(normalmap, FRAGCOORD.xz).rgb;
	ALBEDO = color.rgb + (0.1 * fresnel);
}"

[sub_resource type="OpenSimplexNoise" id=2]

[sub_resource type="NoiseTexture" id=3]
seamless = true
noise = SubResource( 2 )

[sub_resource type="OpenSimplexNoise" id=4]

[sub_resource type="NoiseTexture" id=5]
seamless = true
as_normalmap = true
noise = SubResource( 4 )

[resource]
shader = SubResource( 1 )
shader_param/height_scale = 1.0
shader_param/color = Color( 0.0901961, 0.25098, 0.407843, 1 )
shader_param/noise = SubResource( 3 )
shader_param/normalmap = SubResource( 5 )
